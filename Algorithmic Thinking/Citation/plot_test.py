# -*- coding: utf-8 -*-
"""
Created on Sun Aug 21 21:22:37 2016

@author: Administrator
"""
import matplotlib.pyplot as plt
import random 

#from pylab import *
#from decimal import *
#print float(4594)/27770
#print Decimal(4594)/Decimal(27770)

#getcontext.prec = 10
#result = {0: 0.16543032048973713, 1: 0.1363701836514224, 2: 0.09719121353979114, 3: 0.07180410514944184, 4: 0.05898451566438603, 5: 0.047785379906373784, 6: 0.04097947425279078, 7: 0.03244508462369464, 8: 0.029672308246308968, 9: 0.02484695714800144, 10: 0.021281958948505583, 11: 0.01897731364782139, 12: 0.01739287000360101, 13: 0.01609650702196615, 14: 0.014728123874684912, 15: 0.011595246669067338, 16: 0.010550954267194814, 17: 0.009866762693554194, 18: 0.010010803024846956, 19: 0.009002520705797623, 20: 0.00799423838674829, 21: 0.006661865322290242, 22: 0.006661865322290242, 23: 0.0058336334173568595, 24: 0.005761613251710479, 25: 0.004897371263953907, 26: 0.004609290601368383, 27: 0.004537270435722002, 28: 0.004969391429600288, 29: 0.00435722002160605, 30: 0.004501260352898812, 31: 0.0031688872884407635, 32: 0.0036010082823190494, 33: 0.0031688872884407635, 34: 0.0024486856319769533, 35: 0.0030968671227943824, 36: 0.0023766654663305727, 37: 0.0029528267915016203, 38: 0.002700756211739287, 39: 0.0023766654663305727, 40: 0.0018725243068059057, 41: 0.0025927259632697154, 42: 0.001908534389629096, 43: 0.002484695714800144, 44: 0.0018005041411595247, 45: 0.0020165646380986674, 46: 0.0018725243068059057, 47: 0.0015844436442203817, 48: 0.0010442924018725242, 49: 0.0017284839755131436, 50: 0.0012243428159884767, 51: 0.0011883327331652864, 52: 0.0011523226503420958, 53: 0.0011163125675189053, 54: 0.0011883327331652864, 55: 0.0010442924018725242, 56: 0.0012603528988116672, 57: 0.0010442924018725242, 58: 0.0009722722362261433, 59: 0.0010442924018725242, 60: 0.0009002520705797623, 61: 0.0009002520705797623, 62: 0.0010082823190493337, 63: 0.0008282319049333814, 64: 0.0009362621534029529, 65: 0.0008282319049333814, 66: 0.0007562117392870003, 67: 0.0008282319049333814, 68: 0.0008642419877565718, 69: 0.0006841915736406194, 70: 0.0007922218221101909, 71: 0.0007562117392870003, 72: 0.00036010082823190496, 73: 0.0006121714079942383, 74: 0.00046813107670147644, 75: 0.0006841915736406194, 76: 0.0006481814908174289, 77: 0.0005401512423478574, 78: 0.00028808066258552396, 79: 0.0008642419877565718, 80: 0.00032409074540871443, 81: 0.0004321209938782859, 82: 0.0005401512423478574, 83: 0.00028808066258552396, 84: 0.00039611091105509543, 85: 0.0005041411595246669, 86: 0.00025207057976233343, 87: 0.00046813107670147644, 88: 0.00036010082823190496, 89: 0.0005041411595246669, 90: 0.00021606049693914295, 91: 0.00025207057976233343, 92: 0.00036010082823190496, 93: 0.00018005041411595248, 94: 0.0006121714079942383, 95: 0.00036010082823190496, 96: 0.00036010082823190496, 97: 0.00036010082823190496, 98: 0.00014404033129276198, 99: 0.00032409074540871443, 100: 0.00025207057976233343, 101: 0.00032409074540871443, 102: 0.00032409074540871443, 103: 0.00014404033129276198, 104: 0.00021606049693914295, 105: 0.00028808066258552396, 106: 0.00036010082823190496, 107: 0.00028808066258552396, 108: 0.00021606049693914295, 109: 0.00028808066258552396, 110: 0.00018005041411595248, 111: 0.00018005041411595248, 112: 0.00010803024846957148, 113: 0.00032409074540871443, 114: 0.00028808066258552396, 115: 0.00018005041411595248, 116: 0.00021606049693914295, 117: 0.00010803024846957148, 118: 0.00028808066258552396, 119: 0.00018005041411595248, 120: 7.202016564638099e-05, 121: 0.00018005041411595248, 122: 0.00010803024846957148, 123: 0.00014404033129276198, 124: 0.00021606049693914295, 125: 0.00018005041411595248, 126: 0.00018005041411595248, 127: 7.202016564638099e-05, 129: 0.00018005041411595248, 130: 3.6010082823190495e-05, 131: 0.00014404033129276198, 132: 3.6010082823190495e-05, 133: 0.00021606049693914295, 134: 0.00010803024846957148, 135: 3.6010082823190495e-05, 136: 0.00021606049693914295, 137: 0.00010803024846957148, 138: 0.00010803024846957148, 139: 0.00014404033129276198, 140: 3.6010082823190495e-05, 141: 0.00014404033129276198, 142: 0.00021606049693914295, 143: 0.00010803024846957148, 144: 0.00018005041411595248, 145: 0.00010803024846957148, 146: 0.00010803024846957148, 147: 3.6010082823190495e-05, 148: 0.00021606049693914295, 149: 0.00014404033129276198, 150: 0.00014404033129276198, 151: 0.00018005041411595248, 152: 7.202016564638099e-05, 153: 0.00010803024846957148, 154: 0.00014404033129276198, 155: 0.00014404033129276198, 156: 7.202016564638099e-05, 157: 0.00014404033129276198, 158: 0.00010803024846957148, 159: 0.00018005041411595248, 160: 3.6010082823190495e-05, 295: 3.6010082823190495e-05, 162: 7.202016564638099e-05, 164: 0.00010803024846957148, 165: 3.6010082823190495e-05, 167: 7.202016564638099e-05, 168: 3.6010082823190495e-05, 169: 7.202016564638099e-05, 171: 7.202016564638099e-05, 172: 0.00021606049693914295, 173: 7.202016564638099e-05, 174: 7.202016564638099e-05, 1199: 3.6010082823190495e-05, 176: 7.202016564638099e-05, 177: 7.202016564638099e-05, 178: 7.202016564638099e-05, 179: 7.202016564638099e-05, 180: 3.6010082823190495e-05, 181: 3.6010082823190495e-05, 182: 3.6010082823190495e-05, 183: 3.6010082823190495e-05, 184: 3.6010082823190495e-05, 185: 3.6010082823190495e-05, 186: 0.00010803024846957148, 187: 3.6010082823190495e-05, 188: 7.202016564638099e-05, 701: 3.6010082823190495e-05, 190: 0.00010803024846957148, 191: 7.202016564638099e-05, 192: 7.202016564638099e-05, 193: 7.202016564638099e-05, 194: 7.202016564638099e-05, 196: 0.00010803024846957148, 197: 7.202016564638099e-05, 198: 3.6010082823190495e-05, 199: 3.6010082823190495e-05, 201: 0.00010803024846957148, 204: 0.00010803024846957148, 205: 0.00014404033129276198, 208: 7.202016564638099e-05, 1144: 3.6010082823190495e-05, 211: 3.6010082823190495e-05, 212: 3.6010082823190495e-05, 213: 3.6010082823190495e-05, 214: 3.6010082823190495e-05, 217: 3.6010082823190495e-05, 219: 3.6010082823190495e-05, 220: 7.202016564638099e-05, 222: 7.202016564638099e-05, 223: 0.00014404033129276198, 224: 3.6010082823190495e-05, 225: 3.6010082823190495e-05, 228: 7.202016564638099e-05, 229: 0.00010803024846957148, 230: 7.202016564638099e-05, 232: 0.00010803024846957148, 233: 7.202016564638099e-05, 235: 3.6010082823190495e-05, 748: 3.6010082823190495e-05, 1775: 3.6010082823190495e-05, 240: 3.6010082823190495e-05, 242: 7.202016564638099e-05, 244: 3.6010082823190495e-05, 189: 3.6010082823190495e-05, 247: 7.202016564638099e-05, 251: 3.6010082823190495e-05, 252: 3.6010082823190495e-05, 257: 7.202016564638099e-05, 520: 3.6010082823190495e-05, 775: 3.6010082823190495e-05, 264: 3.6010082823190495e-05, 265: 3.6010082823190495e-05, 268: 3.6010082823190495e-05, 273: 3.6010082823190495e-05, 274: 3.6010082823190495e-05, 1299: 3.6010082823190495e-05, 788: 7.202016564638099e-05, 1032: 3.6010082823190495e-05, 282: 7.202016564638099e-05, 290: 3.6010082823190495e-05, 807: 3.6010082823190495e-05, 297: 3.6010082823190495e-05, 301: 0.00010803024846957148, 304: 3.6010082823190495e-05, 308: 3.6010082823190495e-05, 1641: 3.6010082823190495e-05, 315: 3.6010082823190495e-05, 651: 3.6010082823190495e-05, 325: 7.202016564638099e-05, 327: 7.202016564638099e-05, 328: 7.202016564638099e-05, 329: 7.202016564638099e-05, 331: 3.6010082823190495e-05, 333: 3.6010082823190495e-05, 337: 3.6010082823190495e-05, 340: 3.6010082823190495e-05, 341: 3.6010082823190495e-05, 344: 3.6010082823190495e-05, 347: 3.6010082823190495e-05, 314: 3.6010082823190495e-05, 2414: 3.6010082823190495e-05, 373: 3.6010082823190495e-05, 380: 7.202016564638099e-05, 383: 3.6010082823190495e-05, 385: 3.6010082823190495e-05, 388: 3.6010082823190495e-05, 1114: 3.6010082823190495e-05, 1006: 3.6010082823190495e-05, 406: 3.6010082823190495e-05, 411: 3.6010082823190495e-05, 421: 3.6010082823190495e-05, 424: 3.6010082823190495e-05, 426: 3.6010082823190495e-05, 427: 3.6010082823190495e-05, 438: 3.6010082823190495e-05, 456: 3.6010082823190495e-05, 175: 3.6010082823190495e-05, 467: 3.6010082823190495e-05, 475: 3.6010082823190495e-05, 494: 3.6010082823190495e-05, 1155: 3.6010082823190495e-05}
#
#x = sorted(result.keys())[1:]
#y = [result[k] for k in x]
#plt.yscale('log')
#plt.xscale('log')
#plt.scatter(x,y)
#plt.title('In degree distribution in loglog')
#plt.xlabel('citataions')
#plt.ylabel('normailzed distribution')
## to save the figure 
#fig = plt.gcf() # get the current figure 
#fig.savefig('good.png', dpi = 200)
## save the fig with defined dpi 
#plt.show()
#
#

# Question 2
def er_alg(nodes,prob_cut):
    digraph_list = []
    for ele_1 in nodes:
        nodes_copy = list(nodes)
        nodes_copy.remove(ele_1)
        add_value = [ele_1]
        for ele_2 in nodes_copy:
            prob_rand = random.random()
            if prob_rand < prob_cut:
                add_value.append(ele_2)
        digraph_list.append(add_value)
    return digraph_list

def er_in_degree(list1):
    nodes = []
    in_list = []
    output = []
    for ele in list1:
        nodes.append(ele[0])
        in_list += ele[1:]
    for node in nodes:
        times = in_list.count(node)
        result = [node,times]
        output.append(result)
    return output
        
def er_distribution(list1):
    distribution = {}
    times_list = [ele[1] for ele in list1]
    for ele in times_list:
        temp_count = times_list.count(ele)
        distribution[ele] = temp_count/float(len(list1))
    return distribution                

#nodes = range(100)
#er_list = er_alg(nodes,0.01)
#b = er_in_degree(er_list)
#print er_distribution(b)
print range(1,3)
